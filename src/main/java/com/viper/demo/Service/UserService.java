package com.viper.demo.Service;

import com.viper.demo.Pojo.User;

import java.util.List;

/**
 * 用户业务逻辑服务接口
 *
 * 该接口定义了用户管理相关的所有业务操作方法
 * 提供用户的增删改查、验证、存在性检查等核心功能
 *
 * 设计原则：
 * 1. 接口与实现分离，便于扩展和测试
 * 2. 方法命名清晰，遵循Spring Data规范
 * 3. 参数验证在实现类中进行
 * 4. 支持逻辑删除，保护数据完整性
 *
 * 主要功能模块：
 * - 用户查询：支持多种查询方式（ID、用户名、邮箱、手机号）
 * - 用户管理：新增、更新、删除用户信息
 * - 数据验证：用户名、邮箱唯一性检查
 * - 密码验证：用户登录密码验证
 * - 列表查询：获取所有用户信息
 *
 * 业务规则：
 * - 用户名和邮箱必须唯一
 * - 删除操作采用逻辑删除方式
 * - 查询操作自动过滤已删除用户
 * - 密码验证支持明文和加密两种方式
 *
 * 实现要求：
 * - 所有方法都应该进行参数验证
 * - 异常情况应该返回null或false，而不是抛出异常
 * - 时间字段（创建时间、更新时间）应该自动维护
 * - 删除标记字段应该自动设置
 *
 * @author Viper
 * @version 1.0
 * @since 2024
 */
public interface UserService {

    /**
     * 根据用户名查询用户信息
     *
     * 该方法用于根据用户名查找对应的用户信息
     * 主要用于用户登录时的身份验证和用户信息获取
     *
     * 业务规则：
     * - 用户名不区分大小写（实现类中处理）
     * - 自动过滤已删除的用户
     * - 用户名为空或null时返回null
     *
     * 使用场景：
     * - 用户登录验证
     * - 用户名唯一性检查
     * - 根据用户名获取用户详情
     *
     * @param username 用户名，不能为空
     * @return 用户信息对象，如果用户不存在或已删除则返回null
     */
    User findByUsername(String username);

    /**
     * 根据用户ID查询用户信息
     *
     * 该方法用于根据用户的唯一标识ID查找用户信息
     * 是最常用的用户查询方法，性能最优
     *
     * 业务规则：
     * - ID为null时返回null
     * - 自动过滤已删除的用户
     * - ID不存在时返回null
     *
     * 使用场景：
     * - 根据登录用户ID获取用户信息
     * - 用户信息更新前的数据获取
     * - 权限验证时的用户信息获取
     *
     * @param id 用户ID，主键，不能为null
     * @return 用户信息对象，如果用户不存在或已删除则返回null
     */
    User findById(Integer id);

    /**
     * 根据邮箱地址查询用户信息
     *
     * 该方法用于根据邮箱地址查找对应的用户信息
     * 主要用于邮箱登录和邮箱唯一性验证
     *
     * 业务规则：
     * - 邮箱地址不区分大小写（实现类中处理）
     * - 自动过滤已删除的用户
     * - 邮箱为空或null时返回null
     *
     * 使用场景：
     * - 邮箱登录验证
     * - 邮箱唯一性检查
     * - 找回密码功能
     *
     * @param email 邮箱地址，不能为空
     * @return 用户信息对象，如果用户不存在或已删除则返回null
     */
    User findByEmail(String email);

    /**
     * 根据手机号码查询用户信息
     *
     * 该方法用于根据手机号码查找对应的用户信息
     * 主要用于手机号登录和手机号唯一性验证
     *
     * 业务规则：
     * - 手机号格式验证（实现类中处理）
     * - 自动过滤已删除的用户
     * - 手机号为空或null时返回null
     *
     * 使用场景：
     * - 手机号登录验证
     * - 手机号唯一性检查
     * - 短信验证功能
     *
     * @param phone 手机号码，不能为空
     * @return 用户信息对象，如果用户不存在或已删除则返回null
     */
    User findByPhone(String phone);

    /**
     * 保存新用户信息
     *
     * 该方法用于创建新的用户账户
     * 会自动设置创建时间、更新时间和删除标记等系统字段
     *
     * 业务规则：
     * - 用户名和邮箱必须唯一（调用前需要验证）
     * - 自动设置创建时间为当前时间
     * - 自动设置更新时间为当前时间
     * - 自动设置删除标记为0（未删除）
     * - 密码应该在调用前进行加密处理
     *
     * 使用场景：
     * - 用户注册
     * - 管理员创建用户
     * - 批量导入用户
     *
     * @param user 用户信息对象，不能为null，必须包含用户名、密码、邮箱等必要信息
     * @return 保存后的用户信息对象（包含自动生成的ID），保存失败返回null
     */
    User save(User user);

    /**
     * 更新用户信息
     *
     * 该方法用于更新已存在用户的信息
     * 会自动更新修改时间，但不会修改创建时间
     *
     * 业务规则：
     * - 用户ID不能为null
     * - 自动设置更新时间为当前时间
     * - 不允许修改用户名（业务规则）
     * - 密码修改需要单独的接口处理
     *
     * 使用场景：
     * - 用户个人信息修改
     * - 管理员修改用户信息
     * - 用户状态更新
     *
     * @param user 用户信息对象，不能为null，必须包含有效的用户ID
     * @return 更新后的用户信息对象，更新失败返回null
     */
    User update(User user);

    /**
     * 删除用户（逻辑删除）
     *
     * 该方法用于删除指定ID的用户
     * 采用逻辑删除方式，不会真正从数据库中删除记录
     *
     * 业务规则：
     * - 采用逻辑删除，设置isDelete字段为1
     * - 自动更新修改时间
     * - 删除后的用户无法登录和查询
     * - 保留数据用于审计和恢复
     *
     * 使用场景：
     * - 管理员删除用户
     * - 用户注销账户
     * - 批量清理无效用户
     *
     * @param id 用户ID，不能为null
     * @return 删除是否成功，true表示删除成功，false表示用户不存在或删除失败
     */
    boolean deleteById(Integer id);

    /**
     * 检查用户名是否已存在
     *
     * 该方法用于验证用户名的唯一性
     * 主要在用户注册和修改用户名时使用
     *
     * 业务规则：
     * - 不区分大小写进行检查
     * - 包括已删除用户的用户名检查
     * - 用户名为空或null时返回false
     *
     * 使用场景：
     * - 用户注册时的用户名验证
     * - 用户名修改时的唯一性检查
     * - 前端实时验证用户名可用性
     *
     * @param username 要检查的用户名，不能为空
     * @return true表示用户名已存在，false表示用户名可用
     */
    boolean existsByUsername(String username);

    /**
     * 检查邮箱地址是否已存在
     *
     * 该方法用于验证邮箱地址的唯一性
     * 主要在用户注册和修改邮箱时使用
     *
     * 业务规则：
     * - 不区分大小写进行检查
     * - 包括已删除用户的邮箱检查
     * - 邮箱为空或null时返回false
     *
     * 使用场景：
     * - 用户注册时的邮箱验证
     * - 邮箱修改时的唯一性检查
     * - 前端实时验证邮箱可用性
     *
     * @param email 要检查的邮箱地址，不能为空
     * @return true表示邮箱已存在，false表示邮箱可用
     */
    boolean existsByEmail(String email);

    /**
     * 获取所有用户列表
     *
     * 该方法用于获取系统中所有用户的信息
     * 主要供管理员使用，用于用户管理和统计
     *
     * 业务规则：
     * - 返回所有用户，包括已删除用户
     * - 密码字段需要在Controller层过滤
     * - 按创建时间或ID排序（实现类中处理）
     *
     * 使用场景：
     * - 管理员用户管理页面
     * - 用户统计和报表
     * - 批量操作用户
     *
     * @return 所有用户信息列表，如果没有用户则返回空列表
     */
    List<User> findAll();

    /**
     * 验证用户密码
     *
     * 该方法用于验证用户输入的密码是否正确
     * 支持明文密码和加密密码的验证
     *
     * 业务规则：
     * - 先根据用户名查找用户
     * - 比较输入密码与存储密码
     * - 支持加密密码验证（实现类中处理）
     * - 已删除用户无法验证密码
     *
     * 使用场景：
     * - 用户登录验证
     * - 修改密码前的旧密码验证
     * - 敏感操作的密码确认
     *
     * @param username 用户名，不能为空
     * @param password 要验证的密码，不能为空
     * @return true表示密码正确，false表示密码错误或用户不存在
     */
    boolean validatePassword(String username, String password);
}
